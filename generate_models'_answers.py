# -*- coding: utf-8 -*-
"""Generate_Models'_Answers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pl53fcyI_FLV1P7ocP6ZQ3jeTrudUSOb
"""

import pandas as pd
import numpy as np
import itertools
import time
import openai
import os, sys
from tqdm.notebook import tqdm

##Import openai key
openai.api_key = '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'

df_sally = pd.read_csv('Sally-Anne_prompt.csv', index_col = 0)
df_smarties = pd.read_csv('Smarties_prompt.csv', index_col = 0)

"""## Define openai function"""

import pandas as pd
import numpy as np
import itertools
import time
import openai
import os, sys
from tqdm.notebook import tqdm

##Import openai key
openai.api_key = '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'
from openai import OpenAI

df_sally = pd.read_csv('Sally-Anne_prompt.csv', index_col = 0)
df_smarties = pd.read_csv('Smarties_prompt.csv', index_col = 0)

def get_response(prompt, max_tokens):
    client = OpenAI(api_key = openai.api_key)

    # GPT-4o request
    rgpt4 = client.chat.completions.create(
        messages=[{"role": "user", "content": prompt}],
        model='gpt-4o',
        temperature=0,
        max_tokens=max_tokens,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )

    return rgpt4.choices[0].message.content

def run(col_prompt, col_response, max_token, df):
    col_response_gpt4o = col_response + '_gpt4o'

    # Create a list to store all responses
    responses = []
    max_attempts = 10

    for index, row in tqdm(df.iterrows(), total=df.shape[0]):
        if col_response not in row or pd.isna(row[col_response]) or row[col_response] == '':
            for attempt in range(max_attempts):
                try:
                    response = get_response(row[col_prompt], max_token)
                    responses.append(response)
                    break  # if the attempt was successful, break out of the retry loop
                except Exception as e:
                    print(e)
                    print(f"Encountered an error at index {index}. Retrying attempt {attempt+1}...")
            else:  # this else clause executes after the for loop finishes without a break (i.e., all attempts failed)
                print(f"Failed to get a response after {max_attempts} attempts at index {index}. Moving on to next row.")
                responses.append("")  # Add empty string if all attempts failed
        else:
            responses.append("")  # Add empty string for rows that already have a response

    # Add the responses as a new column at the end
    df[col_response_gpt4o] = responses

    return df


df_smarties = run('qa_prompt', 'qa', 50, df_smarties)
df_smarties = run('comp_prompt', 'comp', 50, df_smarties)

df_sally = run('qa_prompt', 'qa', 50, df_sally)
df_sally = run('comp_prompt', 'comp', 50, df_sally)

df_sally.to_csv('df_sally.csv', index=False)

"""## Generate answers:
**prompt column names:**

Question and Answer = qa_prompt,

Completion = comp_prompt,

Multiple choice = mc_prompt,

Fill in Blank = fb_prompt,

True or False = tf_prompt,

True or False with reason = tfr_prompt<br>
**max tokens**

qa: 50, comp: 50, mc: 2, fb: 10, tf: 20, tfr: 100

QA
"""

df_sally = run('qa_prompt', 'qa', 50, df_sally)

df_crayon = run('qa_prompt', 'qa', 50, df_crayon)

"""Completion"""

df_sally = run('comp_prompt', 'comp', 50, df_sally)

df_crayon = run('comp_prompt', 'comp', 50, df_crayon)